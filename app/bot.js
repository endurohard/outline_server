require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { Client } = require('pg');
const { getUsersWithKeys, getUsers, getKeysFromDatabase } = require('../functions/adminFunctions');
const { saveClient } = require('../functions/clientFunctions');
const { showMainKeyboard } = require('../functions/showMainKeyboard');
const { requestNewKey, createNewKey } = require('../functions/keyFunctions');

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
const token = process.env.TELEGRAM_TOKEN;
const adminId = process.env.ADMIN_ID?.toString();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
const dbConfig = {
    host: process.env.POSTGRES_HOST || 'localhost',
    port: process.env.POSTGRES_PORT || 5432,
    user: process.env.POSTGRES_USER,
    password: process.env.POSTGRES_PASSWORD,
    database: process.env.POSTGRES_NAME,
};

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const db = new Client(dbConfig);
db.connect()
    .then(() => console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ"))
    .catch(err => {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:", err);
        process.exit(1);
    });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ adminId
if (!token || !adminId) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Admin ID: ${adminId}`);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–ª—é—á–∏
let pendingKeyRequests = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(userId) {
    const isAdminUser = String(userId) === String(adminId);
    console.log(`[isAdmin] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞: ${isAdminUser ? "—è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" : "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"}`);
    return isAdminUser;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–µ
async function sendSafeMessage(bot, chatId, text, options = {}) {
    if (text && text.trim()) {
        await bot.sendMessage(chatId, text, options);
    } else {
        console.warn(`[sendSafeMessage] –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chatId = ${chatId}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.username || msg.from.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
    const text = msg.text?.trim();

    console.log(`[onMessage] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID = ${userId}, —á–∞—Ç ID = ${chatId}`);

    const isAdminUser = isAdmin(userId);
    try {
        if (text === '/start' || text === '/menu') {
            console.log("[onMessage] –ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ /menu. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            await sendSafeMessage(bot, chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?');
            showMainKeyboard(bot, chatId, isAdminUser);
            await saveClient(userId, userName);
        } else if (text === '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è') {
            console.log("[onMessage] –ö–æ–º–∞–Ω–¥–∞ '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.");
            await sendSafeMessage(bot, chatId, '–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'iOS', url: 'https://itunes.apple.com/us/app/outline-app/id1356177741' },
                            { text: 'Android', url: 'https://play.google.com/store/apps/details?id=org.outline.android.client' },
                            { text: 'Windows', url: 'https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe' }
                        ],
                        [
                            { text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/bagamedovit' }
                        ]
                    ]
                }
            });
        } else if (text === '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—á') {
            console.log("[onMessage] –ö–æ–º–∞–Ω–¥–∞ '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—á'. –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            await sendSafeMessage(bot, chatId, '–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ üîÅ');
            await requestNewKey(bot, userId, chatId, userName, adminId, pendingKeyRequests);
            showMainKeyboard(bot, chatId, isAdminUser);
        } else if (text === '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–ª—é—á–∞–º–∏') {
            console.log("[onMessage] –ö–æ–º–∞–Ω–¥–∞ '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–ª—é—á–∞–º–∏'. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            if (isAdminUser) {
                await getUsersWithKeys(chatId, bot);
                showMainKeyboard(bot, chatId, isAdminUser);
            } else {
                console.warn("[onMessage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ.");
                await sendSafeMessage(bot, chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
            }
        } else if (text === '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
            console.log("[onMessage] –ö–æ–º–∞–Ω–¥–∞ '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            if (isAdminUser) {
                await getUsers(chatId, bot);
                showMainKeyboard(bot, chatId, isAdminUser);
            } else {
                console.warn("[onMessage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ.");
                await sendSafeMessage(bot, chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
            }
        } else if (text === '–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π') {
            console.log("[onMessage] –ö–æ–º–∞–Ω–¥–∞ '–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π'. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            if (isAdminUser) {
                await getKeysFromDatabase(chatId, bot);
                showMainKeyboard(bot, chatId, isAdminUser);
            } else {
                console.warn("[onMessage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ.");
                await sendSafeMessage(bot, chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
            }
        } else if (text === '–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á') {
            console.log("[onMessage] –ö–æ–º–∞–Ω–¥–∞ '–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á'. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            if (isAdminUser) {
                await requestNewKey(bot, userId, chatId, userName, adminId, pendingKeyRequests);
                showMainKeyboard(bot, chatId, isAdminUser);
            } else {
                console.warn("[onMessage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ.");
                await sendSafeMessage(bot, chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
            }
        } else {
            console.warn("[onMessage] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤.");
            await sendSafeMessage(bot, chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }
    } catch (error) {
        console.error("[onMessage] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        await sendSafeMessage(bot, chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendSafeMessage(bot, chatId, message, options = {}) {
    if (message && message.trim()) {
        await bot.sendMessage(chatId, message, options);
    } else {
        console.warn("[sendSafeMessage] –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–ª—é—á–∏
bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const [action, requestId] = data.split('_');

    console.log(`[callback_query] –ü–æ–ª—É—á–µ–Ω callback_query —Å –¥–µ–π—Å—Ç–≤–∏–µ–º: ${action} –∏ requestId: ${requestId}`);

    if (action === 'confirm') {
        console.log(`[callback_query] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–ª—é—á –¥–ª—è requestId: ${requestId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –≤ pendingKeyRequests
        if (!pendingKeyRequests[requestId]) {
            console.error(`[callback_query] –û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å —Å requestId ${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pendingKeyRequests.`);
            await bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.', show_alert: true });
            return;
        }

        const { userId, chatId, userName } = pendingKeyRequests[requestId];

        console.log(`[callback_query] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: userId = ${userId}, chatId = ${chatId}, userName = ${userName}`);

        if (userId) {
            const { formattedKey, creationDate } = await createNewKey(bot, userId, chatId);
            if (formattedKey && creationDate) {
                console.log(`[callback_query] –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö.`);

                await sendSafeMessage(bot, chatId, `–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á —Ü–µ–ª–∏–∫–æ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ üëá\n\n–í–∞—à –∫–ª—é—á: ${formattedKey}`);
                await sendSafeMessage(bot, chatId, `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${creationDate.toISOString().slice(0, 19).replace("T", " ")}`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚úÖ', callback_data: 'copy_key' }]
                        ]
                    }
                });
                await sendSafeMessage(bot, adminId, `–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID = ${userId}.`);
            } else {
                console.error("[callback_query] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
                await sendSafeMessage(bot, chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ pendingKeyRequests
            delete pendingKeyRequests[requestId];
        } else {
            console.warn(`[callback_query] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è requestId ${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        }
    } else if (action === 'decline') {
        console.log(`[callback_query] –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–ª—é—á –¥–ª—è requestId: ${requestId}`);

        if (pendingKeyRequests[requestId]) {
            const { chatId } = pendingKeyRequests[requestId];
            await sendSafeMessage(bot, chatId, '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
            delete pendingKeyRequests[requestId];
        } else {
            console.warn(`[callback_query] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: requestId ${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚úÖ"
    if (data === 'copy_key') {
        console.log("[callback_query] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚úÖ'");
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', show_alert: true });
    } else {
        // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback_query –¥–ª—è –∫–Ω–æ–ø–æ–∫ confirm/decline
        await bot.answerCallbackQuery(callbackQuery.id);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ–ø—Ä–æ—Å–∞
bot.on('polling_error', (error) => console.error("[polling_error] –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞:", error));